---
########################################################
# This play will use DMS's REST API to identify the source volumes to be migrated,
# based on what is specified in the configuration.
# Once the source volumes are identified, it will rename the volumes to the desired name
# according to the configuration
########################################################
-   name: Identify Source Volumes
    hosts: localhost # DMS operations are REST API based therefore it will be executed locally
    become: false
    gather_facts: false
    vars_files:
        - ../vars/config.yaml
    tasks:
        -   name: Retrieve Source Volumes List
            uri:
                url: "https://{{ dms.host }}/api/source/volumes"
                method: GET
                url_username: "{{dms.username}}"
                url_password: "{{dms.password}}"
                force_basic_auth: true
                validate_certs: false
            register: source_volume_data

        -   name: Find Source Volumes To Be Migrated
            set_fact:
                source_volumes_to_be_migrated: "{{ source_volume_data.json.volumes | selectattr('uuid', 'in', (migration.source_volumes|map(attribute='uuid')|join(',')) ) }}"

        -   name: Rename Source Volumes
            uri:
                url: "https://{{ dms.host }}/api/storage-config/volumes/actions:rename"
                method: POST
                url_username: "{{dms.username}}"
                url_password: "{{dms.password}}"
                force_basic_auth: true
                validate_certs: false
                body_format: json
                body:
                    volumeUuid: "{{ item.uuid }}"
                    # find desired new name from variable file using uuid
                    newName: "{{ ( migration.source_volumes | selectattr('uuid', '==', item.uuid) | first ).name }}"
            loop: "{{source_volumes_to_be_migrated}}"

        -   name: Retrieve Source Volumes List After Rename
            uri:
                url: "https://{{ dms.host }}/api/source/volumes"
                method: GET
                url_username: "{{dms.username}}"
                url_password: "{{dms.password}}"
                force_basic_auth: true
                validate_certs: false
            register: source_volume_data

        -   name: Find Source Volumes To Be Migrated After Rename
            set_fact:
                source_volumes_to_be_migrated: "{{ source_volume_data.json.volumes | selectattr('uuid', 'in', (migration.source_volumes|map(attribute='uuid')|join(',')) ) }}"
########################################################
# Next, this play will retrieve the destination HBA information, and create a host entity on
# destination storage (a Pure FlashArray in this example) with the WWPN.
########################################################
-   name: Create DMS Host Entity on Destination Storage
    hosts: localhost
    become: false
    gather_facts: false
    vars_files:
        - ../vars/config.yaml
    vars:
        all_destination_ports: [ ]
    tasks:
        -   name: Retrieve Appliance Information from DMS
            uri:
                url: "https://{{ dms.host }}/api/appliances"
                url_username: "{{dms.username}}"
                url_password: "{{dms.password}}"
                force_basic_auth: true
                validate_certs: false
            register: appliances_data

        -   name: Retrieve Destination HBA Information from DMS
            uri:
                url: "https://{{ dms.host }}/api/appliances/{{ item.name }}/fc-ports"
                url_username: "{{dms.username}}"
                url_password: "{{dms.password}}"
                force_basic_auth: true
                validate_certs: false
            register: fc_ports_data
            loop: "{{appliances_data.json.appliances}}"

        -   name: Obtain All Destination Initiator Ports Info
            set_fact:
                all_destination_ports: "{{ all_destination_ports + item.json.destinationHbas }} "
            loop: "{{ fc_ports_data.results }}"

        -   name: Create DMS Host Entity on Pure FA
            purestorage.flasharray.purefa_host:
                name: "{{appliances_data.json.appliances[0].name }}"
                wwns: "{{ all_destination_ports | map(attribute='wwpn')  }}"
                state: present
                fa_url: "{{ storage.destination.host }}"
                api_token: "{{ storage.destination.fa_api_token }}"

        -   set_fact:
                dms_host_entity_name: "{{appliances_data.json.appliances[0].name }}"
########################################################
# Now that a new host entity is created on the destination storage configuration,
# this play automatically create destination volumes that matches the source volumes
# and assign to the DMS appliance (the host entity created in the previous play)
########################################################
-   name: Auto-Allocate Destination Volumes
    hosts: localhost
    become: false
    gather_facts: false
    vars_files:
        - ../vars/config.yaml
    tasks:
        -   name: Create Volume on Destination Storage
            loop: "{{ source_volumes_to_be_migrated }}"
            purestorage.flasharray.purefa_volume:
                name: "{{ item.deviceName }}"
                size: "{{ (item.capacity|int) / 1024 / 1024}}M"
                state: present
                fa_url: "{{ storage.destination.host }}"
                api_token: "{{ storage.destination.fa_api_token }}"
            register: destination_volumes_allocated
        -   debug:
                var: destination_volumes_allocated

        -   name: Map Volumes to DMS Host Entity
            loop: "{{ source_volumes_to_be_migrated }}"
            purestorage.flasharray.purefa_host:
                volume: "{{ item.deviceName }}"
                name: "{{ dms_host_entity_name }}"
                state: present
                fa_url: "{{ storage.destination.host }}"
                api_token: "{{ storage.destination.fa_api_token }}"
########################################################
# After destination volumes are created and mapped in the FlashArray,
# this play will come back to the DMS use the rescan API to discover the new volumes.
# Once the new volumes are discovered, it will match with the source volume using the "serial number"
# from FlashArray and rename the destination volumes.
# The destination volumes will be named using format [SOURCE_VOLUME_NAME]_D
########################################################
-   name: Rescan DMS and Identify Volumes after Auto Allocation
    hosts: localhost # Insertion operations are REST API based therefore it will be executed locally
    become: false
    gather_facts: false
    vars_files:
        - ../vars/config.yaml
    tasks:
        -   name: Rescan Destination Configuration
            uri:
                url: "https://{{ dms.host }}/api/destination/actions:rescan"
                method: POST
                url_username: "{{dms.username}}"
                url_password: "{{dms.password}}"
                force_basic_auth: true
                validate_certs: false

        -   name: Retrieve Destination Volumes List
            uri:
                url: "https://{{ dms.host }}/api/destination/volumes"
                method: GET
                url_username: "{{dms.username}}"
                url_password: "{{dms.password}}"
                force_basic_auth: true
                validate_certs: false
            register: dest_volume_data

        # This task loops through the new destination volumes from pure, match up with the discovered volume in DMS, and rename it to [SOURCE_NAME]_D
        -   name: Match and Rename Destination Volumes on DMS
            uri:
                url: "https://{{ dms.host }}/api/storage-config/volumes/actions:rename"
                method: POST
                url_username: "{{dms.username}}"
                url_password: "{{dms.password}}"
                force_basic_auth: true
                validate_certs: false
                body_format: json
                body:
                    volumeUuid: "{{ (dest_volume_data.json.volumes | selectattr('uuid','match', '.*'+(item.volume.serial| lower)[-12:] + '$' ) | first).uuid }}"
                    # find desired new name from variable file using uuid
                    newName: "{{ item.volume.name }}_D"
            loop: "{{ destination_volumes_allocated.results }}"
        -   name: Retrieve Destination Volumes List after Rename
            uri:
                url: "https://{{ dms.host }}/api/destination/volumes"
                method: GET
                url_username: "{{dms.username}}"
                url_password: "{{dms.password}}"
                force_basic_auth: true
                validate_certs: false
            register: dest_volume_data
########################################################
# Once the source and destination volumes are both identified,
# this play will then create migration session. Once session is created, migration will start.
# Once the migration session finishes synchronization, head over to the "cutover" playbook.
########################################################
-   name: Start Migration
    hosts: localhost # Insertion operations are REST API based therefore it will be executed locally
    become: false
    gather_facts: false
    vars_files:
        - ../vars/config.yaml
    tasks:
        # This task goes through all the source volumes, and generate a list of source/destination device name pairs
        -   name: Prepare Volume Session Parameters
            set_fact:
                volume_params: "{{ volume_params|default([]) + [ {'source' : item.deviceName, 'destination': item.deviceName + '_D' } ] }}"
            loop: "{{source_volumes_to_be_migrated}}"

        -   name: Create Migration Session
            uri:
                url: "https://{{ dms.host }}/api/migration-sessions"
                method: POST
                url_username: "{{dms.username}}"
                url_password: "{{dms.password}}"
                force_basic_auth: true
                validate_certs: false
                body_format: json
                body:
                    description: Created from Ansible Playbook
                    type: LOCAL
                    volumes: "{{ volume_params }}"
                    skipThinBlocks: true
                    autoResyncMinutes: 60
                    migrationBlockSize: BLOCK_SIZE_1MB
